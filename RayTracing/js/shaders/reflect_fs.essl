Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	
	varying vec2 texCoord; // pass this on from vertex shader

	// we need to bind texture to this
	uniform sampler2D probeTexture;
	uniform vec3 cameraPos;

	varying vec3 rayDir;

	uniform vec4 lightPositions[2];
	uniform vec3 lightPowerDensity[2];
	uniform vec3 lightDirection[1];
	uniform mat4 quadrics[32];
	uniform mat4 multiclipper[6];
	uniform vec4 multibrdfs[16];
	uniform vec4 brdfs[17];

	vec3 shade(vec3 worldPos, vec3 worldNormal, vec4 brdfs) {
		vec3 light;
		vec3 eyeColor = vec3(0,0,0);
		vec3 powerDensity;
		vec3 kd = brdfs.xyz;
		vec3 h;
		float cos;
		float cosPhong;
		float cosDir;

		for (int i = 0; i < 1; i++) {
			light = lightPositions[i].xyz - lightPositions[i].w * worldPos.xyz;
			cos = dot(normalize(light), normalize(worldNormal));
			cosDir = dot(normalize(light), normalize(lightDirection[0]));
			h = (normalize(light) + normalize(worldNormal)) / 2.0;
			cosPhong = dot(h, worldNormal);
			if (lightPositions[i].w == 1.0) {
				powerDensity = lightPowerDensity[i] * pow(cosDir, 10.0);
			}
			else {
				powerDensity = lightPowerDensity[i];
			}
			vec3 M = powerDensity / dot(light,light);
			eyeColor += M * kd * max(cos, 0.0) + M * kd * pow(cosPhong, 10.0);
		}
		return vec3(eyeColor);
	}

	float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d, bool funClip) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float dis = b * b - 4.0 * a * c;
		if (dis < 0.0) {
			return -1.0;
		}
		float t1 = (-b + sqrt(dis)) / (2.0 * a);
		float t2 = (-b - sqrt(dis)) / (2.0 * a);

		vec4 h1 = e + d*t1;
		vec4 h2 = e + d*t2;

		float r1 = dot(h1*B,h1);
		float r2 = dot(h2*B,h2);

		if (r1 > 0.0) {
			t1 = -1.0;
		}
		if (r2 > 0.0) {
			t2 = -1.0;
		}

		vec4 pos = e + d*t1;
		vec4 pos2 = e + d*t2;

		if (t1 < t2 && t1 > 0.0 || t2 < 0.0) {
			if (funClip && mod(floor(10.0*pos.y)/10.0, 0.2) == 0.0) {
				if (mod(floor(10.0*pos2.y)/10.0, 0.2) == 0.0) {
					return -1.0;
				}
			} else {
				return t1;
			}
		} else if (funClip && mod(floor(10.0*pos2.y)/10.0, 0.2) == 0.0) {
				if (mod(floor(10.0*pos.y)/10.0, 0.2) == 0.0) {
					return -1.0;
				}
		} else {
				return t2;
		}
	}

	float intersectMultiClipped(mat4 A, mat4 B, mat4 C, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float dis = b * b - 4.0 * a * c;
		if (dis < 0.0) {
			return -1.0;
		}
		float t1 = (-b + sqrt(dis)) / (2.0 * a);
		float t2 = (-b - sqrt(dis)) / (2.0 * a);

		vec4 h1 = e + d*t1;
		vec4 h2 = e + d*t2;

		float r1 = dot(h1*B,h1);
		float r2 = dot(h2*B,h2);
		float r3 = dot(h1*C,h1);
		float r4 = dot(h2*C,h2);

		if (r1 > 0.0 || r3 > 0.0) {
			t1 = -1.0;
		}
		if (r2 > 0.0 || r4 > 0.0) {
			t2 = -1.0;
		}

		if (t1 < t2 && t1 > 0.0 || t2 < 0.0) {
			return t1;
		} else {
			return t2;
		}
	}

	float findMinPos(float t1, float t2) {
		if (t1 > 0.0 && t2 < 0.0) {
			return t1;
		} else if (t2 > 0.0 && t1 < 0.0) {
			return t2;
		} else {
			return min(t1, t2);
		}
	}

	bool findBestHit(vec4 e, vec4 d, inout float bestT, out vec4 bestBrdf, out mat4 bestA, out bool isBoard) {
		bool funClip = false;
		for (int i = 0; i < 16; i++) {
			if (brdfs[i].w == 2.0) {
				funClip = true;
			} else {
				funClip = false;
			}
			float t = intersectClippedQuadric(quadrics[2*i], quadrics[2*i+1], e, d, funClip);
			
			if (findMinPos(t,bestT) == t) {
				bestT = t;
				bestA = quadrics[2*i];
				bestBrdf = brdfs[i];
			}
		}

		for (int i = 0; i < 2; i++) {
			float t = intersectMultiClipped(multiclipper[3*i], multiclipper[3*i+1], multiclipper[3*i+2], e, d);
			if (findMinPos(t,bestT) == t) {
				if (i == 1) isBoard = true;
				bestT = t;
				bestA = multiclipper[3*i];
				bestBrdf = multibrdfs[i];
			}
		}

		if (bestT > 0.0) {
			return true;
		} else {
			return false;
		}
	}

	vec3 checker(vec3 worldPos, bool isBoard) {
		if (isBoard) {
			if (mod(floor(worldPos.x / 4.0), 2.0) == 0.0 && mod(floor(worldPos.z / 4.0), 2.0) == 0.0
				|| mod(floor(worldPos.x / 4.0), 2.0) != 0.0 && mod(floor(worldPos.z / 4.0), 2.0) != 0.0) {
					return vec3(.51, 0, 0);
			}
		}
	}

	float shadow(vec3 pos, vec3 normal) {
		bool isBoard = false;
		vec4 bestBrdf;
		float bestT = -1.0;
		mat4 bestA;
		pos += normal * .01;
		vec4 lightDir = vec4(normalize(lightPositions[0].xyz - pos), 0.0);
		if (findBestHit(vec4(pos,1.0), lightDir, bestT, bestBrdf, bestA, isBoard)) {
			return 0.0;
		} else {
			return 1.0;
		}
	}

	float noise(vec3 r) {
		vec3 s = vec3(7502.0, 22777.0, 4767.0);
		float f = 0.0;
		for (int i = 0; i < 16; i++) {
			f += sin(dot(s-vec3(32768.0, 32768.0, 32768.0), r * 40.0) / 65536.0);
			s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
		}
		return f / 32.0 + 0.5;
	}

	vec3 getWood(vec3 position, bool isBoard) {
		float scale = 16.0;
		float turbulence = 500.0;
		float period = 8.0;
		float sharpness = 10.0;
		if (isBoard) {
			float w = pow(noise(position*scale), sharpness)*turbulence;
			w -= floor(w+10000.0) - 10000.0;
			return vec3(vec3(1.0, 0.3, 0.0)*w + vec3(0.35,0.1,0.05)*(1.0-w));
		}
	}

	vec3 noiseGrad(vec3 r) {
		vec3 s = vec3(7502.0, 22777, 4767.0);
		vec3 f = vec3(0.0, 0.0, 0.0);
		for (int i = 0; i < 16; i++) {
			f += cos(dot(s-vec3(32768.0, 32768.0, 32768.0), r*40.0) / 65536.0) * (s-vec3(32768.0, 32768.0, 32768.0)) * 40.0;
			s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
		}
		return f / 65536.0;
	}

	void main(void) {
		vec4 e = vec4(cameraPos, 1.0);
		vec4 d = vec4(rayDir, 0.0);
		bool isBoard = false;
		vec4 bestBrdf;
		float bestT = -1.0;
		mat4 bestA;

		bool hit = findBestHit(e, d, bestT, bestBrdf, bestA, isBoard);

		if (hit) {
			vec4 intersectionPoint = e + d * bestT;
			vec3 normal;
			if (bestBrdf.w == 1.0) {
				normal = normalize(vec3(bestA * intersectionPoint + intersectionPoint * bestA).xyz) + noiseGrad(intersectionPoint.xyz);
			} else {
				normal = normalize(vec3(bestA * intersectionPoint + intersectionPoint * bestA).xyz);
			}
			gl_FragColor = vec4((shade(intersectionPoint.xyz, normal, bestBrdf) + checker(intersectionPoint.xyz, isBoard) + getWood(intersectionPoint.xyz, isBoard))*shadow(intersectionPoint.xyz, normal), 1.0);
		}
		else {
			vec3 mirrorCoord = vec3(normalize(vec3(0.0, 0.0, 1.0) + normalize(rayDir.xyz))) / 2.0;
			vec2 probeTex = vec2(mirrorCoord.x + 0.5, -1.0*mirrorCoord.y + 0.5);
			gl_FragColor = texture2D(probeTexture, probeTex);
		}
	}
`;