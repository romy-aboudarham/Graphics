Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	
	varying vec2 texCoord; // pass this on from vertex shader

	// we need to bind texture to this
	uniform sampler2D colorTexture; 
	uniform vec4 lightPositions[2];
	uniform vec3 lightPowerDensity[2];
	uniform vec3 lightDirection[1];
	varying vec3 worldNormal;
	varying vec4 worldPos;

	void main(void) {
		vec3 light;
		vec3 eyeColor = vec3(0,0,0);
		vec3 powerDensity;
		vec3 kd = texture2D(colorTexture, texCoord).rgb;
		vec3 h;
		float cos;
		float cosPhong;
		float cosDir;

		for (int i = 0; i < 2; i++) {
			light = lightPositions[i].xyz - lightPositions[i].w * worldPos.xyz;
			cos = dot(normalize(light), normalize(worldNormal));
			cosDir = dot(normalize(light), normalize(lightDirection[0]));
			h = (normalize(light) + normalize(worldNormal)) / 2.0;
			cosPhong = dot(h, worldNormal);
			if (lightPositions[i].w == 1.0) {
				powerDensity = lightPowerDensity[i] * pow(cosDir, 10.0);
			}
			else {
				powerDensity = lightPowerDensity[i];
			}
			vec3 M = powerDensity / dot(light,light);
			eyeColor += M * kd * max(cos, 0.0) + M * kd * pow(cosPhong, 10.0);
		}
		gl_FragColor = vec4(eyeColor, 1);
	}
`;